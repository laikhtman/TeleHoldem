Create a complete Proof of Concept for a Texas Hold'em poker web application. The project should be modular, with separate files for the game engine, the UI, and the bot logic.Follow these instructions precisely, file by file.1. Project StructureFirst, create the following file structure:index.htmlstyle.cssgame-engine-core.jsgame-table-ui.jsai-bot-logic.jsmain.js2. game-engine-core.js - The Game LogicIn this file, create and export a JavaScript class named GameEngine. This class must not contain any DOM manipulation or UI code. It will manage the complete state of the game.Class GameEngine should contain:constructor():Initialize this.deck as an empty array.Initialize this.players as an empty array.Initialize this.communityCards as an empty array.Initialize this.pot = 0.Initialize this.gameState to 'idle'.Initialize this.currentPlayerIndex = 0.Define suits = ['♥', '♦', '♣', '♠'] and ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'].Method createDeck():Populate this.deck with 52 card objects, each with a suit and rank (e.g., { suit: '♥', rank: 'A' }).Method shuffleDeck():Shuffle this.deck using the Fisher-Yates algorithm.Method addPlayer(name, chips, isHuman = false):Adds a player object { name, chips, hand: [], isHuman, currentBet: 0, isAllIn: false, hasFolded: false } to this.players.Method dealHoleCards():Give two cards from the top of the deck to each player in this.players.Method dealFlop():Burn one card, then add the next three cards from the deck to this.communityCards.Method dealTurn() and dealRiver():Burn one card, then add the next card to this.communityCards.Method startGame():Set this.gameState to 'pre-flop'.Reset pot, communityCards, and player states (hand, hasFolded, etc.).Call createDeck(), shuffleDeck(), and dealHoleCards().Placeholder Method handlePlayerAction(action, amount):A simple method that logs the action for now, e.g., console.log(\Player ${this.players[this.currentPlayerIndex].name} chose to ${action} with amount ${amount}`)`.Placeholder Method evaluateHands():A method that will eventually determine the winner. For now, it can just log a message like "Evaluating hands...".3. index.html - The Game ViewStructure the HTML to represent the poker table and its elements.<!DOCTYPE html>
<html>
<head>
    <title>Texas Hold'em PoC</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="poker-table">
        <div id="community-cards-area">
            <div class="card-placeholder"></div>
            <div class="card-placeholder"></div>
            <div class="card-placeholder"></div>
            <div class="card-placeholder"></div>
            <div class="card-placeholder"></div>
        </div>
        <div id="pot-display">Pot: $0</div>
        <div id="player-seats">
            <!-- Player seats will be generated by JavaScript -->
        </div>
    </div>
    <div id="controls-area">
        <button id="fold-btn">Fold</button>
        <button id="check-btn">Check</button>
        <button id="bet-btn">Bet</button>
        <input type="range" id="bet-slider" min="10" max="1000" value="10">
        <span id="bet-amount">$10</span>
    </div>

    <script src="game-engine-core.js"></script>
    <script src="game-table-ui.js"></script>
    <script src="ai-bot-logic.js"></script>
    <script src="main.js"></script>
</body>
</html>
4. style.css - The Visual StylingAdd CSS to make the game look like a poker table.body { font-family: sans-serif; background-color: #333; color: white; display: flex; justify-content: center; align-items: center; height: 100vh; flex-direction: column; }
#poker-table { width: 800px; height: 400px; background-color: #006400; border-radius: 150px; border: 10px solid #5C4033; position: relative; }
#community-cards-area { display: flex; justify-content: center; gap: 10px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
.card-placeholder, .card { width: 60px; height: 90px; background-color: #eee; border: 1px solid #333; border-radius: 5px; display: flex; justify-content: center; align-items: center; font-size: 24px; }
.card.red { color: red; }
.card.black { color: black; }
#pot-display { position: absolute; top: 35%; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,0.5); padding: 5px 10px; border-radius: 5px; }
#player-seats { position: relative; width: 100%; height: 100%; }
.player-seat { position: absolute; text-align: center; }
.player-info { background: rgba(0,0,0,0.7); padding: 5px; border-radius: 5px; }
.player-cards { display: flex; gap: 5px; justify-content: center; margin-top: 5px; }
#controls-area { margin-top: 20px; display: flex; gap: 10px; align-items: center; }
button { padding: 10px 20px; font-size: 16px; cursor: pointer; }
